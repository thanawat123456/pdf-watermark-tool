import streamlit as st
import pandas as pd
import io
from datetime import datetime
import zipfile
import math
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
from PyPDF2 import PdfReader, PdfWriter
import tempfile
import os

# ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå THSarabunNew.ttf
try:
    pdfmetrics.registerFont(TTFont('THSarabunNew', 'THSarabunNew.ttf'))
    FONT_AVAILABLE = True
except:
    FONT_AVAILABLE = False

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="PDF Individual Watermark Tool",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

def read_file_names(uploaded_file, column_index=0, sheet_name=None):
    """‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠ Excel"""
    try:
        file_extension = uploaded_file.name.lower().split('.')[-1]
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        if file_extension == 'csv':
            # ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢ encoding ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CSV
            try:
                df = pd.read_csv(uploaded_file, encoding='utf-8')
            except:
                try:
                    uploaded_file.seek(0)
                    df = pd.read_csv(uploaded_file, encoding='utf-8-sig')
                except:
                    try:
                        uploaded_file.seek(0)
                        df = pd.read_csv(uploaded_file, encoding='cp874')
                    except:
                        try:
                            uploaded_file.seek(0)
                            df = pd.read_csv(uploaded_file, encoding='tis-620')
                        except:
                            uploaded_file.seek(0)
                            df = pd.read_csv(uploaded_file, encoding='utf-8', sep=';')
        
        elif file_extension == 'xlsx':
            # ‡∏≠‡πà‡∏≤‡∏ô Excel
            if sheet_name:
                df = pd.read_excel(uploaded_file, sheet_name=sheet_name, engine='openpyxl')
            else:
                df = pd.read_excel(uploaded_file, engine='openpyxl')
        
        else:
            return [], f"‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {file_extension}"
        
        if df.empty or len(df.columns) == 0:
            return [], f"‡πÑ‡∏ü‡∏•‡πå {file_extension.upper()} ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤"
        
        if column_index >= len(df.columns):
            return [], f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà {column_index + 1}"
        
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        names_column = df.iloc[:, column_index]
        names = [str(name).strip() for name in names_column.dropna() if str(name).strip()]
        
        return names, None
    except Exception as e:
        return [], str(e)

def get_excel_sheets(uploaded_file):
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Sheet ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel"""
    try:
        if uploaded_file.name.lower().endswith('.xlsx'):
            excel_file = pd.ExcelFile(uploaded_file, engine='openpyxl')
            return excel_file.sheet_names
        return []
    except:
        return []


def create_watermark_overlay(name, page_width, page_height):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏ô - ‡πÅ‡∏ö‡∏ö‡∏ó‡πÅ‡∏¢‡∏á‡∏°‡∏∏‡∏° 9 ‡∏à‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà"""
    packet = io.BytesIO()
    can = canvas.Canvas(packet, pagesize=(page_width, page_height))
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏≤‡∏¢‡∏ô‡πâ‡∏≥
    if FONT_AVAILABLE:
        can.setFont("THSarabunNew", 45)  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å 60
    else:
        can.setFont("Helvetica", 30)      # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å 40
    
    can.setFillColorRGB(0.6, 0.6, 0.6, alpha=0.20)  # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á 9 ‡∏à‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞)
    positions = [
        # ‡πÅ‡∏ñ‡∏ß‡∏ö‡∏ô‡∏ã‡πâ‡∏≤‡∏¢-‡∏ö‡∏ô-‡∏ö‡∏ô‡∏Ç‡∏ß‡∏≤
        (page_width * 0.15, page_height * 0.85),  # ‡∏ö‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
        (page_width * 0.5, page_height * 0.9),    # ‡∏ö‡∏ô‡∏Å‡∏•‡∏≤‡∏á (‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô)
        (page_width * 0.85, page_height * 0.85),  # ‡∏ö‡∏ô‡∏Ç‡∏ß‡∏≤
        
        # ‡πÅ‡∏ñ‡∏ß‡∏Å‡∏•‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢-‡∏Å‡∏•‡∏≤‡∏á-‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤
        (page_width * 0.1, page_height * 0.55),   # ‡∏Å‡∏•‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢ (‡∏ã‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏Å)
        (page_width * 0.5, page_height * 0.5),    # ‡∏Å‡∏•‡∏≤‡∏á‡∏Å‡∏•‡∏≤‡∏á
        (page_width * 0.9, page_height * 0.55),   # ‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ (‡∏Ç‡∏ß‡∏≤‡∏°‡∏≤‡∏Å)
        
        # ‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢-‡∏•‡πà‡∏≤‡∏á-‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤
        (page_width * 0.15, page_height * 0.2),   # ‡∏•‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢
        (page_width * 0.5, page_height * 0.15),   # ‡∏•‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏≤‡∏á (‡∏ï‡πà‡∏≥‡∏•‡∏á)
        (page_width * 0.85, page_height * 0.2),   # ‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤
    ]
    
    # ‡∏ß‡∏≤‡∏á‡∏•‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÉ‡∏ô 9 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
    for i, (x, y) in enumerate(positions):
        can.saveState()
        can.translate(x, y)
        
        # ‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡∏ó‡πÅ‡∏¢‡∏á‡∏°‡∏∏‡∏° (+45 ‡∏≠‡∏á‡∏®‡∏≤ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)
        rotation_angle = 45
        can.rotate(rotation_angle)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        font_name = "THSarabunNew" if FONT_AVAILABLE else "Helvetica"
        font_size = 45 if FONT_AVAILABLE else 30
        text_width = can.stringWidth(name, font_name, font_size)
        
        # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á)
        can.drawString(-text_width / 2, 0, name)
        can.restoreState()
    
    can.save()
    packet.seek(0)
    return packet

def add_watermark_to_pdf(pdf_file, name, original_filename):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö PDF ‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤"""
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô PDF ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        pdf_reader = PdfReader(pdf_file)
        pdf_writer = PdfWriter()
        
        for page_num, page in enumerate(pdf_reader.pages):
            # ‡∏î‡∏∂‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤
            page_width = float(page.mediabox.width)
            page_height = float(page.mediabox.height)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
            watermark_packet = create_watermark_overlay(name, page_width, page_height)
            watermark_reader = PdfReader(watermark_packet)
            watermark_page = watermark_reader.pages[0]
            
            # ‡∏£‡∏ß‡∏°‡∏•‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°
            page.merge_page(watermark_page)
            pdf_writer.add_page(page)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡πÉ‡∏´‡∏°‡πà
        output_buffer = io.BytesIO()
        pdf_writer.write(output_buffer)
        output_buffer.seek(0)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
        base_name = original_filename.rsplit('.', 1)[0] if '.' in original_filename else original_filename
        safe_name = "".join(c for c in name if c.isalnum() or c in (' ', '_', '-')).strip()
        new_filename = f"{base_name}_{safe_name}.pdf"
        
        return output_buffer, new_filename, None
        
    except Exception as e:
        return None, None, str(e)

def process_pdf_with_names(pdf_file, names_list, original_filename):
    """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• PDF ‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    results = []
    
    for name in names_list:
        pdf_file.seek(0)  # Reset file pointer
        pdf_buffer, filename, error = add_watermark_to_pdf(pdf_file, name, original_filename)
        
        if pdf_buffer:
            results.append({
                'name': name,
                'filename': filename,
                'buffer': pdf_buffer,
                'error': None
            })
        else:
            results.append({
                'name': name,
                'filename': None,
                'buffer': None,
                'error': error
            })
    
    return results

def create_zip_file(pdf_results):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå ZIP ‡∏à‡∏≤‡∏Å PDF ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå"""
    zip_buffer = io.BytesIO()
    
    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
        for result in pdf_results:
            if result['buffer'] and result['filename']:
                zip_file.writestr(result['filename'], result['buffer'].getvalue())
    
    zip_buffer.seek(0)
    return zip_buffer

def main():
    st.title("üìÑ PDF Individual Watermark Tool")
    st.markdown("### ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î CSV (‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠) ‡πÅ‡∏•‡∏∞ PDF (‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")
    
    with st.sidebar:
        st.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
        
        st.subheader("üìã ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        column_option = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠:",
            ["‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A (‡πÅ‡∏£‡∏Å)", "‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå B (‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á)", "‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C (‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°)", "‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå D (‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πà)", "‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå E (‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≤)"],
            help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô CSV ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠"
        )
        
        column_index = {
            "‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A (‡πÅ‡∏£‡∏Å)": 0, 
            "‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå B (‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á)": 1, 
            "‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C (‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°)": 2, 
            "‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå D (‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πà)": 3, 
            "‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå E (‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≤)": 4
        }[column_option]
        
        st.markdown("---")
        st.markdown("### üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        st.markdown("""
        1. ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠ Excel ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠
        2. ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠
        4. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Excel: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sheet ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        5. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
        6. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î ZIP ‡∏ó‡∏µ‡πà‡∏°‡∏µ PDF ‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏∑‡πà‡∏≠
        """)
        
        st.markdown("### üéØ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
        st.markdown("""
        - **1 ‡∏ä‡∏∑‡πà‡∏≠ = 1 PDF**
        - ‡∏•‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô PDF
        - ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: `‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°_‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠.pdf`
        - ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏£‡∏ß‡∏°‡πÉ‡∏ô ZIP
        """)
        
        if not FONT_AVAILABLE:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå THSarabunNew - ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå Helvetica ‡πÅ‡∏ó‡∏ô")
        
        # ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á CSV
        sample_csv = """‡∏ä‡∏∑‡πà‡∏≠,‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á,‡πÅ‡∏ú‡∏ô‡∏Å
‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ,‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£,‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î
‡∏™‡∏∏‡∏î‡∏≤ ‡∏£‡∏±‡∏Å‡∏á‡∏≤‡∏ô,‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏≠‡∏£‡πå,IT
‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡∏Ç‡∏¢‡∏±‡∏ô,‡∏ô‡∏±‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ,‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
‡∏ô‡∏¥‡∏î‡∏≤ ‡πÄ‡∏Å‡πà‡∏á‡∏á‡∏≤‡∏ô,‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå,‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤
‡∏ò‡∏ô‡∏≤ ‡∏â‡∏•‡∏≤‡∏î,‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢,‡∏Ç‡∏≤‡∏¢"""
        
        if st.button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á CSV"):
            st.download_button(
                label="üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î sample.csv",
                data=sample_csv,
                file_name="sample_names.csv",
                mime="text/csv"
            )
    
    # ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üìÅ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå")
        
        # ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î CSV/Excel
        data_file = st.file_uploader(
            "üìä ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠ Excel ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠",
            type=['csv', 'xlsx'],
            help="‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠ Excel ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"
        )
        
        # ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î PDF
        pdf_file = st.file_uploader(
            "üìÑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö",
            type=['pdf'],
            help="‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏≤‡∏¢‡∏ô‡πâ‡∏≥"
        )
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î
        selected_sheet = None
        if data_file:
            file_extension = data_file.name.lower().split('.')[-1]
            
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Excel ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sheet
            if file_extension == 'xlsx':
                sheets = get_excel_sheets(data_file)
                if sheets:
                    st.subheader("üìë ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sheet")
                    selected_sheet = st.selectbox(
                        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sheet ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠:",
                        sheets,
                        help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sheet ‡πÉ‡∏ô Excel ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠"
                    )
            
            with st.expander(f"üìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {file_extension.upper()}"):
                names, error = read_file_names(data_file, column_index, selected_sheet)
                
                if names:
                    # ‡πÅ‡∏™‡∏î‡∏á DataFrame
                    data_file.seek(0)
                    try:
                        if file_extension == 'csv':
                            df = pd.read_csv(data_file, encoding='utf-8')
                        else:
                            if selected_sheet:
                                df = pd.read_excel(data_file, sheet_name=selected_sheet, engine='openpyxl')
                            else:
                                df = pd.read_excel(data_file, engine='openpyxl')
                        
                        st.dataframe(df.head(), use_container_width=True)
                        
                        col_info1, col_info2 = st.columns(2)
                        with col_info1:
                            st.info(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: {len(df)}")
                        with col_info2:
                            st.info(f"üìã ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {len(df.columns)}")
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                        st.write("**‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö:**")
                        for i, col in enumerate(df.columns):
                            st.write(f"- ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {chr(65+i)}: `{col}`")
                        
                        if file_extension == 'xlsx' and selected_sheet:
                            st.info(f"üìë Sheet ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {selected_sheet}")
                        
                    except Exception as e:
                        st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ: {str(e)}")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠
                    st.success(f"üë• ‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ {len(names)} ‡∏Ñ‡∏ô:")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô columns
                    name_cols = st.columns(3)
                    for i, name in enumerate(names):
                        with name_cols[i % 3]:
                            st.write(f"‚Ä¢ {name}")
                else:
                    st.error(f"‚ùå {error}")
        
        if pdf_file:
            with st.expander("üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PDF"):
                try:
                    pdf_reader = PdfReader(pdf_file)
                    num_pages = len(pdf_reader.pages)
                    
                    col_pdf1, col_pdf2 = st.columns(2)
                    with col_pdf1:
                        st.info(f"üìÑ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤: {num_pages}")
                    with col_pdf2:
                        st.info(f"üìÅ ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: {pdf_file.name}")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
                    first_page = pdf_reader.pages[0]
                    width = float(first_page.mediabox.width)
                    height = float(first_page.mediabox.height)
                    st.write(f"**‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤**: {width:.0f} x {height:.0f} points")
                    
                except Exception as e:
                    st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô PDF ‡πÑ‡∏î‡πâ: {str(e)}")
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        if data_file and pdf_file:
            st.markdown("---")
            
            names, error = read_file_names(data_file, column_index, selected_sheet)
            
            if names and not error:
                st.info(f"üéØ ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(names)} ‡πÑ‡∏ü‡∏•‡πå")
                
                if st.button("üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏≤‡∏¢‡∏ô‡πâ‡∏≥", type="primary"):
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..."):
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• PDF
                        results = process_pdf_with_names(pdf_file, names, pdf_file.name)
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                        success_count = sum(1 for r in results if r['buffer'])
                        error_count = len(results) - success_count
                        
                        progress_bar.progress(100)
                        status_text.success(f"‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {success_count} ‡πÑ‡∏ü‡∏•‡πå, ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î {error_count} ‡πÑ‡∏ü‡∏•‡πå")
                        
                        if success_count > 0:
                            # ‡∏™‡∏£‡πâ‡∏≤‡∏á ZIP
                            zip_buffer = create_zip_file(results)
                            current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
                            zip_filename = f"pdf_watermarked_{current_time}.zip"
                            
                            st.download_button(
                                label=f"üì¶ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î ZIP ({success_count} ‡πÑ‡∏ü‡∏•‡πå)",
                                data=zip_buffer.getvalue(),
                                file_name=zip_filename,
                                mime="application/zip"
                            )
                            
                            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                            with st.expander("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß"):
                                for result in results:
                                    if result['buffer']:
                                        st.success(f"‚úÖ {result['filename']} - {result['name']}")
                                    else:
                                        st.error(f"‚ùå {result['name']} - {result['error']}")
                        
                        if error_count > 0:
                            st.error(f"‚ùå ‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {error_count} ‡πÑ‡∏ü‡∏•‡πå")
            else:
                st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    
    with col2:
        st.subheader("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥")
        
        if data_file:
            names, _ = read_file_names(data_file, column_index, selected_sheet)
            file_type = data_file.name.split('.')[-1].upper()
            st.metric("‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", len(names))
            st.metric(f"‡πÑ‡∏ü‡∏•‡πå {file_type}", "1 ‡πÑ‡∏ü‡∏•‡πå")
        
        if pdf_file:
            try:
                pdf_reader = PdfReader(pdf_file)
                st.metric("‡∏´‡∏ô‡πâ‡∏≤ PDF", f"{len(pdf_reader.pages)} ‡∏´‡∏ô‡πâ‡∏≤")
                st.metric("‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö", "1 ‡πÑ‡∏ü‡∏•‡πå")
            except:
                st.metric("‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
        
        if data_file and pdf_file:
            names, _ = read_file_names(data_file, column_index, selected_sheet)
            st.metric("‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ", f"{len(names)} ‡πÑ‡∏ü‡∏•‡πå")
        
        st.subheader("üí° ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        st.markdown("""
        - ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á CSV/Excel ‡πÅ‡∏•‡∏∞ PDF
        - CSV/Excel ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Excel: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sheet ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        - PDF ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ
        - ‡∏•‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á PDF
        - ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: `‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°_‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠.pdf`
        - ‡πÑ‡∏ü‡∏•‡πå ZIP ‡∏à‡∏∞‡∏°‡∏µ PDF ‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏∑‡πà‡∏≠
        """)
        
        st.subheader("üé® ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏≤‡∏¢‡∏ô‡πâ‡∏≥")
        if data_file:
            names, _ = read_file_names(data_file, column_index, selected_sheet)
            if names:
                st.write("**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏≤‡∏¢‡∏ô‡πâ‡∏≥:**")
                for name in names[:5]:  # ‡πÅ‡∏™‡∏î‡∏á 5 ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏£‡∏Å
                    st.write(f"üè∑Ô∏è {name}")
                if len(names) > 5:
                    st.write(f"‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(names)-5} ‡∏Ñ‡∏ô...")

if __name__ == "__main__":
    main()